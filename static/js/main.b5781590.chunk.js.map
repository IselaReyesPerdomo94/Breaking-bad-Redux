{"version":3,"sources":["ducks/characters.js","components/nav/index.jsx","components/card/index.jsx","components/quote/index.jsx","components/search/index.jsx","components/quote-list/index.jsx","components/character-list/index.jsx","views/Home/index.jsx","ducks/quotes.js","views/Quotes/index.jsx","App.jsx","utils/constants.js","store/index.js","epic/index.js","index.jsx"],"names":["charactersState","loading","characters","error","state","action","type","Nav","className","to","Card","img","name","occupation","nickname","status","portrayed","seasons","useState","show","setShow","cardClass","arrow","characterInfo","src","alt","onClick","Quote","author","quote","Search","value","onChange","QuoteList","searchValue","quotes","length","filter","toUpperCase","includes","map","key","quote_id","searchAuthorQuote","CharacterList","character","join","char_id","appearance","searchCharacter","mapDispatchToProps","startFetchCharacters","connect","isLoading","setSearchValue","useEffect","e","target","color","height","width","quotesState","startFetchQuotes","App","exact","path","BASE_URL","rootReducer","combineReducers","rootEpic","combineEpics","action$","pipe","ofType","switchMap","ajax","getJSON","response","epicMiddleware","createEpicMiddleware","store","createStore","applyMiddleware","run","container","document","getElementById","appWithProvider","ReactDOM","render"],"mappings":"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","file":"static/js/main.b5781590.chunk.js","sourcesContent":["//Actions\r\nexport const START_FETCH_CHARACTER = 'START_FETCH_CHARACTER';\r\nexport const FETCH_CHARACTER_SUCCESS = 'FETCH_CHARACTER_SUCCESS';\r\nexport const FETCH_CHARACTER_ERROR = 'FETCH_CHARACTER_ERROR';\r\n\r\n//state\r\nconst charactersState = {\r\n    loading: false,\r\n    characters: [],\r\n    error: null\r\n}\r\n\r\n//Reducer\r\nconst characters = (state = charactersState, action) => {\r\n    switch (action.type) {\r\n        case START_FETCH_CHARACTER:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case FETCH_CHARACTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                characters: action.characters\r\n            }\r\n        case FETCH_CHARACTER_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//Action creators\r\nexport const startFetchCharacters = () => ({\r\n    type: START_FETCH_CHARACTER\r\n})\r\n\r\nexport const fetchCharacterSuccess = (characters) => ({\r\n    type: FETCH_CHARACTER_SUCCESS,\r\n    characters: characters\r\n})\r\n\r\nexport const fetchCharacterError = (error) => ({\r\n    type: FETCH_CHARACTER_ERROR,\r\n    error: error\r\n})\r\n\r\nexport default characters;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Nav = () =>{ \r\n    return(\r\n        <header className=\"header\">\r\n            <div>\r\n                <h1 className=\"breaking\">Breaking</h1>\r\n                <h1 className=\"bad\">Bad</h1>\r\n            </div>\r\n            <nav className=\"nav\">\r\n                <Link to=\"/\" className=\"links\">Home</Link>\r\n                <Link to=\"/quotes\" className=\"links\">Quotes</Link>\r\n            </nav>\r\n</header>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, {useState} from 'react';\r\nimport { GiChemicalArrow } from 'react-icons/gi';\r\nimport './style.css';\r\n\r\nconst Card = ({img, name, occupation, nickname, status, portrayed, seasons}) => {\r\n    const [show, setShow] = useState(false)\r\n   \r\n    const handleClickShowInfo = () => setShow(!show)\r\n\r\n    const cardClass = `character-info ${show ? \"show-more\" : \"show-less\"}`;\r\n    const arrow = `arrow ${show ? \"s\" : \"down\"}`;\r\n    const characterInfo = `character-details ${show ? \"\" : \"hide\"}`;\r\n    return(\r\n        <article className=\"card\">\r\n            <figure>\r\n                <img src={img} alt={img}/>\r\n            </figure>\r\n            <div className={cardClass}>\r\n                <header>\r\n                    <h3>{name}</h3>\r\n                    <span className={arrow} onClick={handleClickShowInfo}><GiChemicalArrow/></span>\r\n                </header>\r\n                <div className={characterInfo}>\r\n                    <p>Occupations: <span>{occupation}</span></p>\r\n                    <p>Nickname: <span>{nickname}</span></p>\r\n                    <p>Status: <span>{status}</span></p>\r\n                    <p>Portrayed by: <span>{portrayed}</span></p>\r\n                    <p>Seasons: <span>{seasons}</span></p>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport './style.css'\r\n\r\nconst Quote = ({author, quote}) => (\r\n    <article className=\"container\">\r\n        <h3>{author}</h3>\r\n        <p>{quote}</p>\r\n    </article>\r\n)\r\n\r\nexport default Quote;","import React from 'react';\r\nimport {FiSearch} from \"react-icons/fi\";\r\n\r\nimport './style.css';\r\n\r\nconst Search = ({value, onChange}) => (\r\n    <div className=\"search-container\">\r\n        <input \r\n            type=\"search\" \r\n            name=\"search\" \r\n            className=\"search-input\"\r\n            value={value}\r\n            onChange={onChange}\r\n            />\r\n        <label>\r\n            <FiSearch className=\"search-icon\"/>\r\n        </label>\r\n    </div>\r\n)\r\n\r\nexport default Search;","import React, {Fragment} from 'react';\r\n\r\nimport {Quote} from '../index';\r\n\r\nimport './style.css'\r\n\r\nconst QuoteList = ({searchValue, quotes}) => {\r\n\r\n    const searchAuthorQuote = (searchValue) => {\r\n        return quotes.filter(quote => quote.author.toUpperCase().includes(searchValue.toUpperCase())).map(quote => <Quote\r\n            author={quote.author}\r\n            quote={quote.quote}\r\n            key={quote.quote_id}\r\n            />)\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                quotes.length && (\r\n                    searchValue && searchAuthorQuote(searchValue) )||\r\n                    quotes && quotes.map(quote => <Quote\r\n                        author={quote.author}\r\n                        quote={quote.quote}\r\n                        key={quote.quote_id}\r\n                    />)\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default QuoteList;\r\n","import React, {Fragment} from 'react';\r\n\r\nimport {Card} from '../index';\r\n\r\nconst CharacterList = ({characters, searchValue}) => {\r\n\r\n    const searchCharacter = (searchValue) => {\r\n        return characters.filter(character => character.name.toUpperCase().includes(searchValue.toUpperCase())).map(character => <Card \r\n            img={character.img}\r\n            name={character.name}\r\n            occupation={character.occupation.join(', ')}\r\n            status={character.status}\r\n            portrayed={character.portrayed}\r\n            nickname={character.nickname}\r\n            key={character.char_id}\r\n            seasons={character.appearance.join(', ')}\r\n        />)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                characters.length && (\r\n                    searchValue && searchCharacter(searchValue)) ||\r\n                    characters && characters.map(character => <Card\r\n                        img={character.img}\r\n                        name={character.name}\r\n                        occupation={character.occupation.join(', ')}\r\n                        status={character.status}\r\n                        portrayed={character.portrayed}\r\n                        nickname={character.nickname}\r\n                        key={character.char_id}\r\n                        seasons={character.appearance.join(', ')}\r\n                    />)\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CharacterList;","import React, {useEffect, useState} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {startFetchCharacters} from '../../ducks/characters';\r\n\r\nimport {Nav, Search, CharacterList} from '../../components';\r\n\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport './style.css';\r\n\r\nconst Home = ({characters, startFetchCharacters, isLoading}) => {\r\n    const [searchValue, setSearchValue] = useState('');\r\n\r\n    const handleSearchChange= (e) => {\r\n      setSearchValue(e.target.value)\r\n    }\r\n\r\n    useEffect( ()=>{\r\n      startFetchCharacters()\r\n    }, [])\r\n    return(\r\n    <div className=\"App\">\r\n      <Nav/>\r\n      <main>\r\n        <Search\r\n          value={searchValue}\r\n          onChange={handleSearchChange}\r\n        />\r\n        <section className=\"characters-section\">\r\n          { isLoading && <div className=\"loader\">\r\n            <Loader \r\n            type=\"Puff\" \r\n            color=\"yellow\" \r\n            height={80} \r\n            width={80} \r\n            className=\"loader\"/>\r\n            </div>\r\n          }\r\n            <CharacterList\r\n              characters={characters}\r\n              searchValue={searchValue}\r\n            />\r\n        </section>\r\n      </main>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({characters}) => {\r\n  return {\r\n    characters: characters.characters,\r\n    isLoading: characters.loading\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  startFetchCharacters\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Home);","//Actions\r\nexport const START_FETCH_QUOTES = 'START_FETCH_QUOTES';\r\nexport const FETCH_QUOTES_SUCCESS = 'FETCH_QUOTES_SUCCESS';\r\nexport const FETCH_QUOTES_ERROR = 'FETCH_QUOTES_ERROR';\r\n\r\n//State\r\nconst quotesState = {\r\n    loading: false,\r\n    quotes: [],\r\n    error: null\r\n}\r\n\r\n//Reducer\r\nconst quotes = (state = quotesState, action) => {\r\n    switch (action.type) {\r\n        case START_FETCH_QUOTES:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case FETCH_QUOTES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                quotes: action.quotes\r\n            }\r\n        case FETCH_QUOTES_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//Actions creators\r\nexport const startFetchQuotes = () => {\r\n    return {\r\n        type: START_FETCH_QUOTES\r\n    }\r\n}\r\n\r\nexport const fetchQuotesSuccess = (quotes) => {\r\n    return {\r\n        type: FETCH_QUOTES_SUCCESS,\r\n        quotes: quotes\r\n    }\r\n}\r\n\r\nexport const fetchQuotesError = (error) => {\r\n    return {\r\n        type: FETCH_QUOTES_ERROR,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport default quotes;","import React, {useEffect, useState} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {startFetchQuotes} from '../../ducks/quotes';\r\nimport {Nav, Search, QuoteList} from '../../components';\r\n\r\nimport Loader from 'react-loader-spinner';\r\nimport './style.css';\r\n\r\nconst Quotes = ({quotes, startFetchQuotes, isLoading}) => {\r\n    const [searchValue, setSearchValue] = useState('')\r\n\r\n    const handleSearchChange = (e) => {\r\n        setSearchValue(e.target.value)\r\n    }\r\n\r\n    useEffect(()=> {\r\n        startFetchQuotes()\r\n    }, [])\r\n    return (\r\n        <main className=\"quotes-main\">\r\n            <header>\r\n                <Nav/>\r\n            </header>\r\n            <Search \r\n                onChange={handleSearchChange}\r\n                value={searchValue}\r\n                />\r\n            <section className=\"quotes-section\">\r\n            { isLoading && <div className=\"loader\">\r\n                <Loader \r\n                    type=\"Puff\" \r\n                    color=\"yellow\" \r\n                    height={80} \r\n                    width={80} \r\n                    className=\"loader\"/>\r\n                </div>\r\n            }\r\n            <QuoteList\r\n                searchValue={searchValue}\r\n                quotes={quotes}\r\n            />\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({quotes}) => {\r\n    return {\r\n        quotes: quotes.quotes,\r\n        isLoading: quotes.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    startFetchQuotes\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Quotes);","import React from 'react';\nimport {Home, Quotes} from './views';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nconst App =() =>(\n  <Router>\n    <Switch>\n      <Route exact path=\"/\"><Home/></Route>\n      <Route exact path=\"/quotes\"><Quotes/></Route>\n    </Switch>\n  </Router>\n)\n\nexport default App;\n","export const BASE_URL = 'https://www.breakingbadapi.com/api/';","import { createEpicMiddleware, combineEpics } from 'redux-observable';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\n\r\nimport { characters, quotes } from '../ducks';\r\nimport { characterEpic, quotesEpic } from '../epic';\r\n\r\n//combining reducers\r\nexport const rootReducer = combineReducers({\r\n    characters,\r\n    quotes\r\n})\r\n\r\n//combining epics\r\nexport const rootEpic = combineEpics(\r\n    characterEpic,\r\n    quotesEpic\r\n)\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\n\r\n//creating store\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(epicMiddleware)\r\n)\r\n\r\nepicMiddleware.run(rootEpic)\r\n\r\nexport default store;","import { ofType } from 'redux-observable';\r\nimport { ajax } from 'rxjs/ajax';\r\nimport { switchMap, map } from 'rxjs/operators';\r\n\r\nimport { BASE_URL } from '../utils/constants';\r\nimport { START_FETCH_CHARACTER, fetchCharacterSuccess } from '../ducks/characters';\r\nimport { START_FETCH_QUOTES, fetchQuotesSuccess } from '../ducks/quotes';\r\n\r\nexport const characterEpic = action$ => action$.pipe(\r\n    ofType(START_FETCH_CHARACTER),\r\n    switchMap(action => ajax.getJSON(`${BASE_URL}characters`).pipe(\r\n        map(response => fetchCharacterSuccess(response))\r\n    ))\r\n)\r\n\r\nexport const quotesEpic = action$ => action$.pipe(\r\n    ofType(START_FETCH_QUOTES),\r\n    switchMap(action => ajax.getJSON(`${BASE_URL}quotes`).pipe(\r\n        map(response => fetchQuotesSuccess(response))\r\n    ))\r\n)","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nconst container = document.getElementById('root');\r\n\r\nconst appWithProvider = ( \r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(appWithProvider, container);"],"sourceRoot":""}