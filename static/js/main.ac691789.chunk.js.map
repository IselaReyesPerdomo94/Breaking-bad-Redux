{"version":3,"sources":["ducks/characters.js","components/nav/index.jsx","components/card/index.jsx","components/quote/index.jsx","components/search/index.jsx","components/quote-list/index.jsx","components/character-list/index.jsx","components/character-list/utils.jsx","views/Home/index.jsx","ducks/quotes.js","views/Quotes/index.jsx","App.jsx","utils/constants.js","store/index.js","epic/index.js","index.jsx"],"names":["charactersState","loading","characters","error","getCharacters","state","getLoadingStatus","action","type","Nav","className","to","Card","img","name","occupation","nickname","status","portrayed","seasons","useState","show","setShow","cardClass","arrow","characterInfo","src","alt","onClick","Quote","author","quote","Search","value","onChange","placeholder","QuoteList","searchValue","quotes","areQuotesToRender","length","showFilteredList","showFullList","filter","toUpperCase","includes","map","key","quote_id","searchAuthorQuote","CharacterList","areCharactersToRender","showFilteredCharacters","mayusSearchValue","character","findCharacter","join","char_id","appearance","filteredCharacterList","season","toString","seasonsAppearenceString","Home","dispatch","useDispatch","useSelector","isLoading","setSearchValue","useEffect","e","target","color","height","width","quotesState","getQuotes","getQuotesLoadingStatus","Quotes","App","basename","window","location","pathname","exact","path","BASE_URL","rootReducer","combineReducers","rootEpic","combineEpics","action$","pipe","ofType","mergeMap","ajax","getJSON","response","catchError","fetchCharacterError","fetchQuotesError","epicMiddleware","createEpicMiddleware","store","createStore","applyMiddleware","run","container","document","getElementById","appWithProvider","ReactDOM","render"],"mappings":"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","file":"static/js/main.ac691789.chunk.js","sourcesContent":["//Actions\nexport const START_FETCH_CHARACTER = 'START_FETCH_CHARACTER';\nexport const FETCH_CHARACTER_SUCCESS = 'FETCH_CHARACTER_SUCCESS';\nexport const FETCH_CHARACTER_ERROR = 'FETCH_CHARACTER_ERROR';\n\n//state\nconst charactersState = {\n    loading: false,\n    characters: [],\n    error: null\n}\n\n//Reducer\nconst characters = (state = charactersState, action) => {\n    switch (action.type) {\n        case START_FETCH_CHARACTER:\n            return {\n                ...state,\n                loading: true\n            }\n        case FETCH_CHARACTER_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                characters: action.characters\n            }\n        case FETCH_CHARACTER_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        default:\n            return state;\n    }\n}\n\n//Action creators\nexport const startFetchCharacters = () => ({\n    type: START_FETCH_CHARACTER\n})\n\nexport const fetchCharacterSuccess = characters => ({\n    type: FETCH_CHARACTER_SUCCESS,\n    characters: characters\n})\n\nexport const fetchCharacterError = error => ({\n    type: FETCH_CHARACTER_ERROR,\n    error: error\n})\n\n//Selectors\nexport const getCharacters = state => state.characters.characters;\nexport const getLoadingStatus = state => state.characters.loading;\n\nexport default characters;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * Nav renders two different links: Home and Quotes.\n * @returns {*} React component.\n */\nconst Nav = () => {\n  return (\n    <header className=\"header\">\n      <div>\n        <h1 className=\"breaking\">Breaking</h1>\n        <h1 className=\"bad\">Bad</h1>\n      </div>\n      <nav className=\"nav\">\n        <Link to=\"/\" className=\"links\">\n          Home\n        </Link>\n        <Link to=\"/quotes\" className=\"links\">\n          Quotes\n        </Link>\n      </nav>\n    </header>\n  );\n};\n\nexport default Nav;\n","import React, { useState } from \"react\";\nimport { GiChemicalArrow } from \"react-icons/gi\";\nimport \"./style.css\";\n\nconst Card = ({\n  img,\n  name,\n  occupation,\n  nickname,\n  status,\n  portrayed,\n  seasons,\n}) => {\n  const [show, setShow] = useState(false);\n\n  const handleClickShowInfo = () => setShow(!show);\n\n  const cardClass = `character-info ${show ? \"show-more\" : \"show-less\"}`;\n  const arrow = `arrow ${show ? \"s\" : \"down\"}`;\n  const characterInfo = `character-details ${show ? \"\" : \"hide\"}`;\n  return (\n    <article className=\"card\">\n      <figure>\n        <img src={img} alt={img} />\n      </figure>\n      <div className={cardClass}>\n        <header>\n          <h3>{name}</h3>\n          <span className={arrow} onClick={handleClickShowInfo}>\n            <GiChemicalArrow />\n          </span>\n        </header>\n        <div className={characterInfo}>\n          <p>\n            Occupations: <span>{occupation}</span>\n          </p>\n          <p>\n            Nickname: <span>{nickname}</span>\n          </p>\n          <p>\n            Status: <span>{status}</span>\n          </p>\n          <p>\n            Portrayed by: <span>{portrayed}</span>\n          </p>\n          <p>\n            Seasons: <span>{seasons}</span>\n          </p>\n        </div>\n      </div>\n    </article>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nimport \"./style.css\";\n\n/**\n * Quote renders a quote from a character.\n * @param   {String}\tauthor  Name of the character.\n * @param   {String}\tquote   Quote of the character.\n * @returns {*} React component.\n */\nconst Quote = ({ author, quote }) => (\n  <article className=\"container\">\n    <h3>{author}</h3>\n    <p>{quote}</p>\n  </article>\n);\n\nexport default Quote;\n","import React from \"react\";\nimport { FiSearch } from \"react-icons/fi\";\n\nimport \"./style.css\";\n\n/**\n * Search is a simple component that is used to search an especific character or quote.\n * @param {String}    value \t\tTyped valued.\n * @param {function} \tonChange  Handle change value.\n * @returns {*} React component.\t\n */\nconst Search = ({ value, onChange }) => (\n  <div className=\"search-container\">\n    <input\n      type=\"search\"\n      name=\"search\"\n      className=\"search-input\"\n      placeholder=\"\n            Write the name of a character\"\n      value={value}\n      onChange={onChange}\n    />\n    <label>\n      <FiSearch className=\"search-icon\" />\n    </label>\n  </div>\n);\n\nexport default Search;\n","import React, { Fragment } from \"react\";\n\nimport { Quote } from \"../index\";\n\nimport \"./style.css\";\n\n/**\n * Quote renders a quote from a character.\n * @param   {String}    searchValue  ValueTyped in search bar.\n * @param   {Array}    quotes  Quote list of the characters.\n * @returns {*} React component.\n */\nconst QuoteList = ({ searchValue, quotes }) => {\n  const areQuotesToRender = quotes && quotes.length > 0;\n  const showFilteredList = areQuotesToRender && searchValue;\n  const showFullList = areQuotesToRender && !searchValue;\n\n  const searchAuthorQuote = (searchValue) => {\n    return quotes\n      .filter((quote) =>\n        quote.author.toUpperCase().includes(searchValue.toUpperCase())\n      )\n      .map((quote) => (\n        <Quote author={quote.author} quote={quote.quote} key={quote.quote_id} />\n      ));\n  };\n\n  return (\n    <Fragment>\n      {showFilteredList && searchAuthorQuote(searchValue)}\n      {showFullList &&\n        quotes.map((quote) => (\n          <Quote\n            author={quote.author}\n            quote={quote.quote}\n            key={quote.quote_id}\n          />\n        ))}\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import React, { Fragment } from \"react\";\n\nimport { Card } from \"../index\";\nimport { transformSeason, filteredCharacterList } from \"./utils.jsx\";\n\n/**\n * CharacterList is in charge of render full or filtered list of characters.\n * @param \t{Array} \tcharacters \tContains all characters.\n * @param \t{String}\tsearchValue\tValue typed in search component.\n * @returns {*} React component. \n */\nconst CharacterList = ({ characters, searchValue }) => {\n\tconst areCharactersToRender = characters.length > 0;\n  const showFilteredCharacters = areCharactersToRender && searchValue;\n\tconst showFullList = areCharactersToRender && !searchValue;\n\n  return (\n    <Fragment>\n\t\t\t{showFilteredCharacters && filteredCharacterList({searchValue, characters})}\n\t\t\t{showFullList && \n\t\t\t\tcharacters.map(character =>\n\t\t\t\t<Card\n\t\t\t\t\timg={character.img}\n\t\t\t\t\tname={character.name}\n\t\t\t\t\toccupation={character.occupation.join(\", \")}\n\t\t\t\t\tstatus={character.status}\n\t\t\t\t\tportrayed={character.portrayed}\n\t\t\t\t\tnickname={character.nickname}\n\t\t\t\t\tkey={character.char_id}\n\t\t\t\t\tseasons={transformSeason(character.appearance)} \n\t\t\t\t/>)}\n    </Fragment>\n  );\n};\n\nexport default CharacterList;\n","import React from \"react\";\r\nimport { Card } from \"../\";\r\n\r\nexport const seasonsAppearenceString = (seasons) =>\r\n  seasons.map((season) => season.toString());\r\n\r\nexport const transformSeason = (seasons) => {\r\n  if (seasons && seasons.length > 0) {\r\n    const seasonToString = seasonsAppearenceString(seasons);\r\n    return seasonToString.join(\", \");\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const findCharacter = ({ searchValue, characters }) => {\r\n  const mayusSearchValue = searchValue.toUpperCase();\r\n  return characters.filter((character) =>\r\n    character.name.toUpperCase().includes(mayusSearchValue)\r\n  );\r\n};\r\n\r\nexport const filteredCharacterList = ({ searchValue, characters }) => {\r\n  return findCharacter({ characters, searchValue }).map((character) => (\r\n    <Card\r\n      img={character.img}\r\n      name={character.name}\r\n      occupation={character.occupation.join()}\r\n      status={character.status}\r\n      portrayed={character.portrayed}\r\n      nickname={character.nickname}\r\n      key={character.char_id}\r\n      seasons={character.appearance}\r\n    />\r\n  ));\r\n};\r\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { startFetchCharacters, getCharacters, getLoadingStatus } from '../../ducks/characters';\n\nimport { Nav, Search, CharacterList } from '../../components';\n\nimport Loader from 'react-loader-spinner';\n\nimport './style.css';\n\n/**\n * Home is the principal page.\n * @returns {*} React component.\n */\nconst Home = () => {\n  const dispatch =  useDispatch();\n  const characters =  useSelector(getCharacters);\n  const isLoading = useSelector(getLoadingStatus);\n  const [searchValue, setSearchValue] = useState('');\n\n  const handleSearchChange= (e) => {\n    setSearchValue(e.target.value)\n  }\n\n  useEffect( ()=>{\n    dispatch(startFetchCharacters());\n  }, [dispatch]);\n\n  return(\n    <div className=\"App\">\n      <Nav />\n      <main>\n        <Search\n          value={searchValue}\n          onChange={handleSearchChange}\n        />\n        <section className=\"characters-section\">\n          { isLoading && \n            <div className=\"loader\">\n              <Loader \n                type=\"Puff\" \n                color=\"yellow\" \n                height={80} \n                width={80} \n                className=\"loader\" \n              />\n            </div>\n          }\n          {\n            characters.length > 0 && \n            <CharacterList\n              characters={characters}\n              searchValue={searchValue}\n            />\n          }\n        </section>\n      </main>\n    </div>\n    )\n}\n\nexport default Home;","//Actions\nexport const START_FETCH_QUOTES = 'START_FETCH_QUOTES';\nexport const FETCH_QUOTES_SUCCESS = 'FETCH_QUOTES_SUCCESS';\nexport const FETCH_QUOTES_ERROR = 'FETCH_QUOTES_ERROR';\n\n//State\nconst quotesState = {\n    loading: false,\n    quotes: [],\n    error: null\n}\n\n//Reducer\nconst quotes = (state = quotesState, action) => {\n    switch (action.type) {\n        case START_FETCH_QUOTES:\n            return {\n                ...state,\n                loading: true\n            }\n        case FETCH_QUOTES_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                quotes: action.quotes\n            }\n        case FETCH_QUOTES_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.error\n            }\n        default:\n            return state;\n    }\n}\n\n//Actions creators\nexport const startFetchQuotes = () => {\n    return {\n        type: START_FETCH_QUOTES\n    }\n};\n\nexport const fetchQuotesSuccess = (quotes) => {\n    return {\n        type: FETCH_QUOTES_SUCCESS,\n        quotes: quotes\n    }\n};\n\nexport const fetchQuotesError = (error) => {\n    return {\n        type: FETCH_QUOTES_ERROR,\n        error: error\n    }\n};\n\nexport const getQuotes = state => state.quotes.quotes;\nexport const getQuotesLoadingStatus = state => state.quotes.loading;\n\nexport default quotes;","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  startFetchQuotes,\n  getQuotes,\n  getQuotesLoadingStatus,\n} from \"../../ducks/quotes\";\nimport { Nav, Search, QuoteList } from \"../../components\";\n\nimport Loader from \"react-loader-spinner\";\nimport \"./style.css\";\n\n/**\n * Quotes render full or filtered list of quotes.\n * @returns {*} React component.\n */\nconst Quotes = () => {\n  const dispatch = useDispatch();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const quotes = useSelector(getQuotes);\n  const isLoading = useSelector(getQuotesLoadingStatus);\n\n  const handleSearchChange = (e) => {\n    setSearchValue(e.target.value);\n  };\n\n  useEffect(() => {\n    dispatch(startFetchQuotes());\n  }, [dispatch]);\n\n  return (\n    <main className=\"quotes-main\">\n      <header>\n        <Nav />\n      </header>\n      <Search onChange={handleSearchChange} value={searchValue} />\n      <section className=\"quotes-section\">\n        {isLoading && (\n          <div className=\"loader\">\n            <Loader\n              type=\"Puff\"\n              color=\"yellow\"\n              height={80}\n              width={80}\n              className=\"loader\"\n            />\n          </div>\n        )}\n        <QuoteList searchValue={searchValue} quotes={quotes} />\n      </section>\n    </main>\n  );\n};\n\nexport default Quotes;\n","import React from 'react';\nimport {Home, Quotes} from './views';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nconst App =() =>(\n  <Router basename={window.location.pathname || ''}>\n    <Switch>\n      <Route exact path=\"/\"><Home/></Route>\n      <Route exact path=\"/quotes\"><Quotes/></Route>\n    </Switch>\n  </Router>\n)\n\nexport default App;\n","export const BASE_URL = 'https://www.breakingbadapi.com/api/';","import { createEpicMiddleware, combineEpics } from 'redux-observable';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n\nimport { characters, quotes } from '../ducks';\nimport { characterEpic, quotesEpic } from '../epic';\n\n//combining reducers\nexport const rootReducer = combineReducers({\n    characters,\n    quotes\n})\n\n//combining epics\nexport const rootEpic = combineEpics(\n    characterEpic,\n    quotesEpic\n)\n\nconst epicMiddleware = createEpicMiddleware();\n\n//creating store\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(epicMiddleware)\n)\n\nepicMiddleware.run(rootEpic)\n\nexport default store;","import { ofType } from 'redux-observable';\nimport { ajax } from 'rxjs/ajax';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\n\nimport { BASE_URL } from '../utils/constants';\nimport { START_FETCH_CHARACTER, fetchCharacterSuccess, fetchCharacterError } from '../ducks/characters';\nimport { START_FETCH_QUOTES, fetchQuotesSuccess, fetchQuotesError } from '../ducks/quotes';\n\nexport const characterEpic = action$ => action$.pipe(\n    ofType(START_FETCH_CHARACTER),\n    mergeMap(() =>\n        ajax.getJSON(`${BASE_URL}characters`)\n        .pipe(\n            map(response => fetchCharacterSuccess(response)),\n            catchError(error => fetchCharacterError(error))\n        )\n    ))\n\nexport const quotesEpic = action$ => action$.pipe(\n    ofType(START_FETCH_QUOTES),\n    mergeMap(() => ajax.getJSON(`${BASE_URL}quotes`)\n        .pipe(\n            map(response => fetchQuotesSuccess(response)),\n            catchError(error => fetchQuotesError(error))\n        )\n    ))","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nconst container = document.getElementById('root');\n\nconst appWithProvider = ( \n    <Provider store={store}>\n        <App/>\n    </Provider>\n)\n\nReactDOM.render(appWithProvider, container);"],"sourceRoot":""}